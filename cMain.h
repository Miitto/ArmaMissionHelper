#ifndef __cMain__
#define __cMain__

/**
@file
Subclass of mainFrame, which is generated by wxFormBuilder.
*/

#include "cGui.h"

//// end generated include

#include "cSettings.h"
#include "cLoadScreen.h"
#include "cDetails.h"
#include "cFileManager.h"

#include "cLoadoutPanel.h"

#include <wx/msgdlg.h>
#include <wx/msw/registry.h>

#include <iostream>

/** Implementing mainFrame */
class cMain : public mainFrame
{
protected:
	// Handlers for mainFrame events.
	void save( wxCommandEvent& event );
	void saveAs( wxCommandEvent& event );
	void open( wxCommandEvent& event );
	void exit( wxCommandEvent& event );
	void onTabChange(wxBookCtrlEvent& event );
	void gameTypeFocus( wxFocusEvent& event );
	void minPlayersFocus( wxFocusEvent& event );
	void maxPlayersFocus( wxFocusEvent& event );
	void respawnTypeFocus( wxFocusEvent& event );
	void startRespawnFocus( wxFocusEvent& event );
	void scriptedHudFocus( wxFocusEvent& event );
	void unitInfoFocus( wxFocusEvent& event );
	void vehRadarFocus( wxFocusEvent& event );
	void vehInfoFocus( wxFocusEvent& event );
	void tankDirFocus( wxFocusEvent& event );
	void commandMenuFocus( wxFocusEvent& event );
	void grpInfoFocus( wxFocusEvent& event );
	void crosshairFocus( wxFocusEvent& event );
	void vehDisplayPanelFocus( wxFocusEvent& event );
	void deathMsgFocus( wxFocusEvent& event );
	void forceDraw3DFocus( wxFocusEvent& event );
	void showMapFocus( wxFocusEvent& event );
	void corpseManagerFocus( wxFocusEvent& event );
	void disableAIFocus( wxFocusEvent& event );
	void adminConsoleFocus( wxFocusEvent& event );
	void disableContextMenu(wxCommandEvent& event);
	void onMissionBackground(wxFileDirPickerEvent& event) override;
	void onMapBackground(wxFileDirPickerEvent& event) override;

	void respawnDelaySliderUpdate(wxCommandEvent& event) override;
	void respawnDelayUpdate(wxCommandEvent& event) override;
	void vehRespawnDelaySliderUpdate(wxCommandEvent& event) override;
	void vehRespawnDelayUpdate(wxCommandEvent& event) override;

	void addLoadingText(wxCommandEvent& event) override;
	void removeLoadingText(wxCommandEvent& event) override;

	void newLoadout(wxCommandEvent& event) override;
	void dupeLoadout(wxCommandEvent& event) override;
	void renameLoadout(wxCommandEvent& event) override;
	void closeLoadout(wxCommandEvent& event) override;
	void deleteLoadout(wxCommandEvent& event) override;
	void selectLoadout(wxCommandEvent& event) override;

public:
	/** Constructor */
	cMain( wxWindow* parent );
	~cMain();

	//// end generated class members

	void save();

	static cMain* mainWindow;

	void open_new_path(wxString path);
	void open_new_path();

	void updateSettings();
	void updateLoadScreen();

	void updateLoadouts();

	void setSettings();
	void setLoadScreen();

	void setLoadouts();

	// Settings Getters
	wxString getGameType();
	int getMinPlayers();
	int getMaxPlayers();
	int getRespawnType();
	int getStartRespawn();
	std::bitset<11> getHudSettings();
	bool getMap();
	int getCorpseMode();
	bool getAi();
	int getAdmin();
	ChannelSet* getChannels();

	int getCorpseLimit();
	int getCorpseMinTime();
	int getCorpseMaxTime();

	int getWreckMode();
	int getWreckLimit();
	int getWreckMinTime();
	int getWreckMaxTime();

	int getMinPlayerDistance();

	bool getCompass();
	bool getGPS();
	bool getWatch();
	bool getGroupInd();
	bool getUAV();
	bool getAiKills();

	// Load Page Getters
	wxString getMapName();
	wxString getMapAuthor();
	wxString getMissionName();
	wxString getMissionAuthor();
	wxString getMissionBackground();
	wxString getMapBackground();
	wxArrayString getLoadTexts();

	// Settings Setters
	void setGameType(wxString type);
	void setMinPlayers(int min);
	void setMaxPlayers(int max);
	void setRespawnType(int type);
	void setStartRespawn(int type);
	void setHudSettings(std::bitset<11> hud);
	void setMap(bool map);
	void setCorpseMode(int type);
	void setAi(bool ai);
	void setAdmin(int admin);
	void setChannels(ChannelSet* channels);

	void setCorpseLimit(int num);
	void setCorpseMinTime(int num);
	void setCorpseMaxTime(int num);

	void setWreckMode(int type);
	void setWreckLimit(int num);
	void setWreckMinTime(int num);
	void setWreckMaxTime(int num);

	void setMinPlayerDistance(int num);

	void setCompass(bool set);
	void setGPS(bool set);
	void setWatch(bool set);
	void setGroupInd(bool set);
	void setUAV(bool set);
	void setAiKills(bool set);

	// Load Screen Setters
	void setMapName(wxString name);
	void setMapAuthor(wxString name);
	void setMissionName(wxString name);
	void setMissionAuthor(wxString name);
	void setMissionBackground(wxString back);
	void setMapBackground(wxString back);
	void setLoadTexts(wxArrayString txts);

	// Respawn Gettters
	bool getRespawnButton();
	bool getRespawnDialog();

	int getRespawnDelay();
	int getVehRespawnDelay();

	int getReviveMode();
	int getDamageModel();
	bool getMedic();
	bool getFAK();
	int getReviveItem();
	int getReviveTime();
	int getMedicMult();
	int getForceRespawnDelay();
	int getBleedOutTime();

	// Respawn Setters

	void setRespawnButton(bool set);
	void setRespawnDialog(bool set);
	void setRespawnDelay(int num);
	void setVehRespawnDelay(int num);
	void setReviveMode(int type);
	void setDamageModel(int num);
	void setMedic(bool set);
	void setFAK(bool set);
	void setReviveItem(int num);
	void setReviveTime(int num);
	void setMedicMult(int num);
	void setForceRespawnDelay(int num);
	void setBleedOutTime(int num);

	std::vector<cLoadoutPanel*> loadoutPages;

	void deleteLoadout(wxString className);
};

#endif // __cMain__
